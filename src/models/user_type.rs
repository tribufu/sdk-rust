/*
 * Tribufu API
 *
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UserType {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "bot")]
    Bot,

}

impl std::fmt::Display for UserType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::User => write!(f, "user"),
            Self::Bot => write!(f, "bot"),
        }
    }
}

impl Default for UserType {
    fn default() -> UserType {
        Self::User
    }
}

